#
# Burrito
# Copyright (C) 2023 The Blockhouse Technology Limited (TBTL)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import server_pb2 as server__pb2


class TrustedOwnerStub(object):
    """The greeting service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DeployVm = channel.unary_unary(
                '/trustedowner.TrustedOwner/DeployVm',
                request_serializer=server__pb2.DeployVmRequest.SerializeToString,
                response_deserializer=server__pb2.DeployVmReply.FromString,
                )
        self.ProvisionVm = channel.unary_unary(
                '/trustedowner.TrustedOwner/ProvisionVm',
                request_serializer=server__pb2.ProvisionVmRequest.SerializeToString,
                response_deserializer=server__pb2.ProvisionVmReply.FromString,
                )
        self.GenerateReportForVm = channel.unary_unary(
                '/trustedowner.TrustedOwner/GenerateReportForVm',
                request_serializer=server__pb2.GenerateReportForVmRequest.SerializeToString,
                response_deserializer=server__pb2.GenerateReportForVmReply.FromString,
                )


class TrustedOwnerServicer(object):
    """The greeting service definition.
    """

    def DeployVm(self, request, context):
        """Sends a greeting
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProvisionVm(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateReportForVm(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TrustedOwnerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DeployVm': grpc.unary_unary_rpc_method_handler(
                    servicer.DeployVm,
                    request_deserializer=server__pb2.DeployVmRequest.FromString,
                    response_serializer=server__pb2.DeployVmReply.SerializeToString,
            ),
            'ProvisionVm': grpc.unary_unary_rpc_method_handler(
                    servicer.ProvisionVm,
                    request_deserializer=server__pb2.ProvisionVmRequest.FromString,
                    response_serializer=server__pb2.ProvisionVmReply.SerializeToString,
            ),
            'GenerateReportForVm': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateReportForVm,
                    request_deserializer=server__pb2.GenerateReportForVmRequest.FromString,
                    response_serializer=server__pb2.GenerateReportForVmReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'trustedowner.TrustedOwner', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TrustedOwner(object):
    """The greeting service definition.
    """

    @staticmethod
    def DeployVm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/trustedowner.TrustedOwner/DeployVm',
            server__pb2.DeployVmRequest.SerializeToString,
            server__pb2.DeployVmReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ProvisionVm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/trustedowner.TrustedOwner/ProvisionVm',
            server__pb2.ProvisionVmRequest.SerializeToString,
            server__pb2.ProvisionVmReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GenerateReportForVm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/trustedowner.TrustedOwner/GenerateReportForVm',
            server__pb2.GenerateReportForVmRequest.SerializeToString,
            server__pb2.GenerateReportForVmReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
