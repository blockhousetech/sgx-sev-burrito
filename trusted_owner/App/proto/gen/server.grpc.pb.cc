/*
 * Burrito
 * Copyright (C) 2023 The Blockhouse Technology Limited (TBTL)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: server.proto

#include "server.pb.h"
#include "server.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace trustedowner {

static const char* TrustedOwner_method_names[] = {
  "/trustedowner.TrustedOwner/DeployVm",
  "/trustedowner.TrustedOwner/ProvisionVm",
  "/trustedowner.TrustedOwner/GenerateReportForVm",
};

std::unique_ptr< TrustedOwner::Stub> TrustedOwner::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TrustedOwner::Stub> stub(new TrustedOwner::Stub(channel, options));
  return stub;
}

TrustedOwner::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_DeployVm_(TrustedOwner_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ProvisionVm_(TrustedOwner_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GenerateReportForVm_(TrustedOwner_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status TrustedOwner::Stub::DeployVm(::grpc::ClientContext* context, const ::trustedowner::DeployVmRequest& request, ::trustedowner::DeployVmReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::trustedowner::DeployVmRequest, ::trustedowner::DeployVmReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeployVm_, context, request, response);
}

void TrustedOwner::Stub::async::DeployVm(::grpc::ClientContext* context, const ::trustedowner::DeployVmRequest* request, ::trustedowner::DeployVmReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::trustedowner::DeployVmRequest, ::trustedowner::DeployVmReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeployVm_, context, request, response, std::move(f));
}

void TrustedOwner::Stub::async::DeployVm(::grpc::ClientContext* context, const ::trustedowner::DeployVmRequest* request, ::trustedowner::DeployVmReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeployVm_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::trustedowner::DeployVmReply>* TrustedOwner::Stub::PrepareAsyncDeployVmRaw(::grpc::ClientContext* context, const ::trustedowner::DeployVmRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::trustedowner::DeployVmReply, ::trustedowner::DeployVmRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeployVm_, context, request);
}

::grpc::ClientAsyncResponseReader< ::trustedowner::DeployVmReply>* TrustedOwner::Stub::AsyncDeployVmRaw(::grpc::ClientContext* context, const ::trustedowner::DeployVmRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeployVmRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TrustedOwner::Stub::ProvisionVm(::grpc::ClientContext* context, const ::trustedowner::ProvisionVmRequest& request, ::trustedowner::ProvisionVmReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::trustedowner::ProvisionVmRequest, ::trustedowner::ProvisionVmReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ProvisionVm_, context, request, response);
}

void TrustedOwner::Stub::async::ProvisionVm(::grpc::ClientContext* context, const ::trustedowner::ProvisionVmRequest* request, ::trustedowner::ProvisionVmReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::trustedowner::ProvisionVmRequest, ::trustedowner::ProvisionVmReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProvisionVm_, context, request, response, std::move(f));
}

void TrustedOwner::Stub::async::ProvisionVm(::grpc::ClientContext* context, const ::trustedowner::ProvisionVmRequest* request, ::trustedowner::ProvisionVmReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProvisionVm_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::trustedowner::ProvisionVmReply>* TrustedOwner::Stub::PrepareAsyncProvisionVmRaw(::grpc::ClientContext* context, const ::trustedowner::ProvisionVmRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::trustedowner::ProvisionVmReply, ::trustedowner::ProvisionVmRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ProvisionVm_, context, request);
}

::grpc::ClientAsyncResponseReader< ::trustedowner::ProvisionVmReply>* TrustedOwner::Stub::AsyncProvisionVmRaw(::grpc::ClientContext* context, const ::trustedowner::ProvisionVmRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncProvisionVmRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TrustedOwner::Stub::GenerateReportForVm(::grpc::ClientContext* context, const ::trustedowner::GenerateReportForVmRequest& request, ::trustedowner::GenerateReportForVmReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::trustedowner::GenerateReportForVmRequest, ::trustedowner::GenerateReportForVmReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GenerateReportForVm_, context, request, response);
}

void TrustedOwner::Stub::async::GenerateReportForVm(::grpc::ClientContext* context, const ::trustedowner::GenerateReportForVmRequest* request, ::trustedowner::GenerateReportForVmReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::trustedowner::GenerateReportForVmRequest, ::trustedowner::GenerateReportForVmReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GenerateReportForVm_, context, request, response, std::move(f));
}

void TrustedOwner::Stub::async::GenerateReportForVm(::grpc::ClientContext* context, const ::trustedowner::GenerateReportForVmRequest* request, ::trustedowner::GenerateReportForVmReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GenerateReportForVm_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::trustedowner::GenerateReportForVmReply>* TrustedOwner::Stub::PrepareAsyncGenerateReportForVmRaw(::grpc::ClientContext* context, const ::trustedowner::GenerateReportForVmRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::trustedowner::GenerateReportForVmReply, ::trustedowner::GenerateReportForVmRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GenerateReportForVm_, context, request);
}

::grpc::ClientAsyncResponseReader< ::trustedowner::GenerateReportForVmReply>* TrustedOwner::Stub::AsyncGenerateReportForVmRaw(::grpc::ClientContext* context, const ::trustedowner::GenerateReportForVmRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGenerateReportForVmRaw(context, request, cq);
  result->StartCall();
  return result;
}

TrustedOwner::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TrustedOwner_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TrustedOwner::Service, ::trustedowner::DeployVmRequest, ::trustedowner::DeployVmReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TrustedOwner::Service* service,
             ::grpc::ServerContext* ctx,
             const ::trustedowner::DeployVmRequest* req,
             ::trustedowner::DeployVmReply* resp) {
               return service->DeployVm(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TrustedOwner_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TrustedOwner::Service, ::trustedowner::ProvisionVmRequest, ::trustedowner::ProvisionVmReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TrustedOwner::Service* service,
             ::grpc::ServerContext* ctx,
             const ::trustedowner::ProvisionVmRequest* req,
             ::trustedowner::ProvisionVmReply* resp) {
               return service->ProvisionVm(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TrustedOwner_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TrustedOwner::Service, ::trustedowner::GenerateReportForVmRequest, ::trustedowner::GenerateReportForVmReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TrustedOwner::Service* service,
             ::grpc::ServerContext* ctx,
             const ::trustedowner::GenerateReportForVmRequest* req,
             ::trustedowner::GenerateReportForVmReply* resp) {
               return service->GenerateReportForVm(ctx, req, resp);
             }, this)));
}

TrustedOwner::Service::~Service() {
}

::grpc::Status TrustedOwner::Service::DeployVm(::grpc::ServerContext* context, const ::trustedowner::DeployVmRequest* request, ::trustedowner::DeployVmReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TrustedOwner::Service::ProvisionVm(::grpc::ServerContext* context, const ::trustedowner::ProvisionVmRequest* request, ::trustedowner::ProvisionVmReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TrustedOwner::Service::GenerateReportForVm(::grpc::ServerContext* context, const ::trustedowner::GenerateReportForVmRequest* request, ::trustedowner::GenerateReportForVmReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace trustedowner

