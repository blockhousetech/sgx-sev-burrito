/*
 * Burrito
 * Copyright (C) 2023 The Blockhouse Technology Limited (TBTL)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server.proto

#include "server.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace trustedowner {
constexpr DeployVmRequest_AmdCerts::DeployVmRequest_AmdCerts(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ark_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ask_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cek_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , oca_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pek_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pdh_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeployVmRequest_AmdCertsDefaultTypeInternal {
  constexpr DeployVmRequest_AmdCertsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeployVmRequest_AmdCertsDefaultTypeInternal() {}
  union {
    DeployVmRequest_AmdCerts _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeployVmRequest_AmdCertsDefaultTypeInternal _DeployVmRequest_AmdCerts_default_instance_;
constexpr DeployVmRequest_MeasurementInfo::DeployVmRequest_MeasurementInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : digest_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , api_major_(0u)
  , api_minor_(0u)
  , build_id_(0u)
  , policy_(0u){}
struct DeployVmRequest_MeasurementInfoDefaultTypeInternal {
  constexpr DeployVmRequest_MeasurementInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeployVmRequest_MeasurementInfoDefaultTypeInternal() {}
  union {
    DeployVmRequest_MeasurementInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeployVmRequest_MeasurementInfoDefaultTypeInternal _DeployVmRequest_MeasurementInfo_default_instance_;
constexpr DeployVmRequest::DeployVmRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : certs_(nullptr)
  , info_(nullptr){}
struct DeployVmRequestDefaultTypeInternal {
  constexpr DeployVmRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeployVmRequestDefaultTypeInternal() {}
  union {
    DeployVmRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeployVmRequestDefaultTypeInternal _DeployVmRequest_default_instance_;
constexpr DeployVmReply::DeployVmReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_buffer_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , godh_cert_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeployVmReplyDefaultTypeInternal {
  constexpr DeployVmReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeployVmReplyDefaultTypeInternal() {}
  union {
    DeployVmReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeployVmReplyDefaultTypeInternal _DeployVmReply_default_instance_;
constexpr ProvisionVmRequest::ProvisionVmRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : measurement_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mnonce_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ProvisionVmRequestDefaultTypeInternal {
  constexpr ProvisionVmRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProvisionVmRequestDefaultTypeInternal() {}
  union {
    ProvisionVmRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProvisionVmRequestDefaultTypeInternal _ProvisionVmRequest_default_instance_;
constexpr ProvisionVmReply::ProvisionVmReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : secret_header_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , secret_blob_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ProvisionVmReplyDefaultTypeInternal {
  constexpr ProvisionVmReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProvisionVmReplyDefaultTypeInternal() {}
  union {
    ProvisionVmReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProvisionVmReplyDefaultTypeInternal _ProvisionVmReply_default_instance_;
constexpr GenerateReportForVmRequest::GenerateReportForVmRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vm_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , vm_data_hmac_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GenerateReportForVmRequestDefaultTypeInternal {
  constexpr GenerateReportForVmRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GenerateReportForVmRequestDefaultTypeInternal() {}
  union {
    GenerateReportForVmRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GenerateReportForVmRequestDefaultTypeInternal _GenerateReportForVmRequest_default_instance_;
constexpr GenerateReportForVmReply::GenerateReportForVmReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : quote_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GenerateReportForVmReplyDefaultTypeInternal {
  constexpr GenerateReportForVmReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GenerateReportForVmReplyDefaultTypeInternal() {}
  union {
    GenerateReportForVmReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GenerateReportForVmReplyDefaultTypeInternal _GenerateReportForVmReply_default_instance_;
}  // namespace trustedowner
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_server_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_server_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_server_2eproto = nullptr;

const uint32_t TableStruct_server_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trustedowner::DeployVmRequest_AmdCerts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::trustedowner::DeployVmRequest_AmdCerts, ark_),
  PROTOBUF_FIELD_OFFSET(::trustedowner::DeployVmRequest_AmdCerts, ask_),
  PROTOBUF_FIELD_OFFSET(::trustedowner::DeployVmRequest_AmdCerts, cek_),
  PROTOBUF_FIELD_OFFSET(::trustedowner::DeployVmRequest_AmdCerts, oca_),
  PROTOBUF_FIELD_OFFSET(::trustedowner::DeployVmRequest_AmdCerts, pek_),
  PROTOBUF_FIELD_OFFSET(::trustedowner::DeployVmRequest_AmdCerts, pdh_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trustedowner::DeployVmRequest_MeasurementInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::trustedowner::DeployVmRequest_MeasurementInfo, api_major_),
  PROTOBUF_FIELD_OFFSET(::trustedowner::DeployVmRequest_MeasurementInfo, api_minor_),
  PROTOBUF_FIELD_OFFSET(::trustedowner::DeployVmRequest_MeasurementInfo, build_id_),
  PROTOBUF_FIELD_OFFSET(::trustedowner::DeployVmRequest_MeasurementInfo, policy_),
  PROTOBUF_FIELD_OFFSET(::trustedowner::DeployVmRequest_MeasurementInfo, digest_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trustedowner::DeployVmRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::trustedowner::DeployVmRequest, certs_),
  PROTOBUF_FIELD_OFFSET(::trustedowner::DeployVmRequest, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trustedowner::DeployVmReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::trustedowner::DeployVmReply, session_buffer_),
  PROTOBUF_FIELD_OFFSET(::trustedowner::DeployVmReply, godh_cert_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trustedowner::ProvisionVmRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::trustedowner::ProvisionVmRequest, measurement_),
  PROTOBUF_FIELD_OFFSET(::trustedowner::ProvisionVmRequest, mnonce_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trustedowner::ProvisionVmReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::trustedowner::ProvisionVmReply, secret_header_),
  PROTOBUF_FIELD_OFFSET(::trustedowner::ProvisionVmReply, secret_blob_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trustedowner::GenerateReportForVmRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::trustedowner::GenerateReportForVmRequest, vm_data_),
  PROTOBUF_FIELD_OFFSET(::trustedowner::GenerateReportForVmRequest, vm_data_hmac_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trustedowner::GenerateReportForVmReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::trustedowner::GenerateReportForVmReply, quote_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::trustedowner::DeployVmRequest_AmdCerts)},
  { 12, -1, -1, sizeof(::trustedowner::DeployVmRequest_MeasurementInfo)},
  { 23, -1, -1, sizeof(::trustedowner::DeployVmRequest)},
  { 31, -1, -1, sizeof(::trustedowner::DeployVmReply)},
  { 39, -1, -1, sizeof(::trustedowner::ProvisionVmRequest)},
  { 47, -1, -1, sizeof(::trustedowner::ProvisionVmReply)},
  { 55, -1, -1, sizeof(::trustedowner::GenerateReportForVmRequest)},
  { 63, -1, -1, sizeof(::trustedowner::GenerateReportForVmReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trustedowner::_DeployVmRequest_AmdCerts_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trustedowner::_DeployVmRequest_MeasurementInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trustedowner::_DeployVmRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trustedowner::_DeployVmReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trustedowner::_ProvisionVmRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trustedowner::_ProvisionVmReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trustedowner::_GenerateReportForVmRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trustedowner::_GenerateReportForVmReply_default_instance_),
};

const char descriptor_table_protodef_server_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014server.proto\022\014trustedowner\"\312\002\n\017DeployV"
  "mRequest\0225\n\005certs\030\001 \001(\0132&.trustedowner.D"
  "eployVmRequest.AmdCerts\022;\n\004info\030\002 \001(\0132-."
  "trustedowner.DeployVmRequest.Measurement"
  "Info\032X\n\010AmdCerts\022\013\n\003ark\030\001 \001(\014\022\013\n\003ask\030\002 \001"
  "(\014\022\013\n\003cek\030\003 \001(\014\022\013\n\003oca\030\004 \001(\014\022\013\n\003pek\030\005 \001("
  "\014\022\013\n\003pdh\030\006 \001(\014\032i\n\017MeasurementInfo\022\021\n\tapi"
  "_major\030\001 \001(\r\022\021\n\tapi_minor\030\002 \001(\r\022\020\n\010build"
  "_id\030\003 \001(\r\022\016\n\006policy\030\004 \001(\r\022\016\n\006digest\030\005 \001("
  "\014\":\n\rDeployVmReply\022\026\n\016session_buffer\030\001 \001"
  "(\014\022\021\n\tgodh_cert\030\002 \001(\014\"9\n\022ProvisionVmRequ"
  "est\022\023\n\013measurement\030\001 \001(\014\022\016\n\006mnonce\030\002 \001(\014"
  "\">\n\020ProvisionVmReply\022\025\n\rsecret_header\030\001 "
  "\001(\014\022\023\n\013secret_blob\030\002 \001(\014\"C\n\032GenerateRepo"
  "rtForVmRequest\022\017\n\007vm_data\030\001 \001(\014\022\024\n\014vm_da"
  "ta_hmac\030\002 \001(\014\")\n\030GenerateReportForVmRepl"
  "y\022\r\n\005quote\030\001 \001(\0142\226\002\n\014TrustedOwner\022H\n\010Dep"
  "loyVm\022\035.trustedowner.DeployVmRequest\032\033.t"
  "rustedowner.DeployVmReply\"\000\022Q\n\013Provision"
  "Vm\022 .trustedowner.ProvisionVmRequest\032\036.t"
  "rustedowner.ProvisionVmReply\"\000\022i\n\023Genera"
  "teReportForVm\022(.trustedowner.GenerateRep"
  "ortForVmRequest\032&.trustedowner.GenerateR"
  "eportForVmReply\"\000B\006\242\002\003ATRb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_server_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_server_2eproto = {
  false, false, 953, descriptor_table_protodef_server_2eproto, "server.proto", 
  &descriptor_table_server_2eproto_once, nullptr, 0, 8,
  schemas, file_default_instances, TableStruct_server_2eproto::offsets,
  file_level_metadata_server_2eproto, file_level_enum_descriptors_server_2eproto, file_level_service_descriptors_server_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_server_2eproto_getter() {
  return &descriptor_table_server_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_server_2eproto(&descriptor_table_server_2eproto);
namespace trustedowner {

// ===================================================================

class DeployVmRequest_AmdCerts::_Internal {
 public:
};

DeployVmRequest_AmdCerts::DeployVmRequest_AmdCerts(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:trustedowner.DeployVmRequest.AmdCerts)
}
DeployVmRequest_AmdCerts::DeployVmRequest_AmdCerts(const DeployVmRequest_AmdCerts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ark_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ark_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ark().empty()) {
    ark_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ark(), 
      GetArenaForAllocation());
  }
  ask_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ask_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ask().empty()) {
    ask_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ask(), 
      GetArenaForAllocation());
  }
  cek_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cek_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cek().empty()) {
    cek_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cek(), 
      GetArenaForAllocation());
  }
  oca_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    oca_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_oca().empty()) {
    oca_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_oca(), 
      GetArenaForAllocation());
  }
  pek_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    pek_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pek().empty()) {
    pek_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pek(), 
      GetArenaForAllocation());
  }
  pdh_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    pdh_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pdh().empty()) {
    pdh_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pdh(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:trustedowner.DeployVmRequest.AmdCerts)
}

inline void DeployVmRequest_AmdCerts::SharedCtor() {
ark_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ark_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ask_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ask_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
cek_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cek_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
oca_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  oca_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
pek_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  pek_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
pdh_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  pdh_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeployVmRequest_AmdCerts::~DeployVmRequest_AmdCerts() {
  // @@protoc_insertion_point(destructor:trustedowner.DeployVmRequest.AmdCerts)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeployVmRequest_AmdCerts::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ark_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ask_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cek_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  oca_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pek_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pdh_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeployVmRequest_AmdCerts::ArenaDtor(void* object) {
  DeployVmRequest_AmdCerts* _this = reinterpret_cast< DeployVmRequest_AmdCerts* >(object);
  (void)_this;
}
void DeployVmRequest_AmdCerts::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeployVmRequest_AmdCerts::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeployVmRequest_AmdCerts::Clear() {
// @@protoc_insertion_point(message_clear_start:trustedowner.DeployVmRequest.AmdCerts)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ark_.ClearToEmpty();
  ask_.ClearToEmpty();
  cek_.ClearToEmpty();
  oca_.ClearToEmpty();
  pek_.ClearToEmpty();
  pdh_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeployVmRequest_AmdCerts::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes ark = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ark();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes ask = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ask();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes cek = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_cek();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes oca = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_oca();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes pek = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_pek();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes pdh = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_pdh();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeployVmRequest_AmdCerts::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trustedowner.DeployVmRequest.AmdCerts)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes ark = 1;
  if (!this->_internal_ark().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_ark(), target);
  }

  // bytes ask = 2;
  if (!this->_internal_ask().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_ask(), target);
  }

  // bytes cek = 3;
  if (!this->_internal_cek().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_cek(), target);
  }

  // bytes oca = 4;
  if (!this->_internal_oca().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_oca(), target);
  }

  // bytes pek = 5;
  if (!this->_internal_pek().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_pek(), target);
  }

  // bytes pdh = 6;
  if (!this->_internal_pdh().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_pdh(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trustedowner.DeployVmRequest.AmdCerts)
  return target;
}

size_t DeployVmRequest_AmdCerts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trustedowner.DeployVmRequest.AmdCerts)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes ark = 1;
  if (!this->_internal_ark().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ark());
  }

  // bytes ask = 2;
  if (!this->_internal_ask().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ask());
  }

  // bytes cek = 3;
  if (!this->_internal_cek().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_cek());
  }

  // bytes oca = 4;
  if (!this->_internal_oca().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_oca());
  }

  // bytes pek = 5;
  if (!this->_internal_pek().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pek());
  }

  // bytes pdh = 6;
  if (!this->_internal_pdh().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pdh());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeployVmRequest_AmdCerts::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeployVmRequest_AmdCerts::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeployVmRequest_AmdCerts::GetClassData() const { return &_class_data_; }

void DeployVmRequest_AmdCerts::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeployVmRequest_AmdCerts *>(to)->MergeFrom(
      static_cast<const DeployVmRequest_AmdCerts &>(from));
}


void DeployVmRequest_AmdCerts::MergeFrom(const DeployVmRequest_AmdCerts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trustedowner.DeployVmRequest.AmdCerts)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ark().empty()) {
    _internal_set_ark(from._internal_ark());
  }
  if (!from._internal_ask().empty()) {
    _internal_set_ask(from._internal_ask());
  }
  if (!from._internal_cek().empty()) {
    _internal_set_cek(from._internal_cek());
  }
  if (!from._internal_oca().empty()) {
    _internal_set_oca(from._internal_oca());
  }
  if (!from._internal_pek().empty()) {
    _internal_set_pek(from._internal_pek());
  }
  if (!from._internal_pdh().empty()) {
    _internal_set_pdh(from._internal_pdh());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeployVmRequest_AmdCerts::CopyFrom(const DeployVmRequest_AmdCerts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trustedowner.DeployVmRequest.AmdCerts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeployVmRequest_AmdCerts::IsInitialized() const {
  return true;
}

void DeployVmRequest_AmdCerts::InternalSwap(DeployVmRequest_AmdCerts* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ark_, lhs_arena,
      &other->ark_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ask_, lhs_arena,
      &other->ask_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &cek_, lhs_arena,
      &other->cek_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &oca_, lhs_arena,
      &other->oca_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pek_, lhs_arena,
      &other->pek_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pdh_, lhs_arena,
      &other->pdh_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeployVmRequest_AmdCerts::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2eproto_getter, &descriptor_table_server_2eproto_once,
      file_level_metadata_server_2eproto[0]);
}

// ===================================================================

class DeployVmRequest_MeasurementInfo::_Internal {
 public:
};

DeployVmRequest_MeasurementInfo::DeployVmRequest_MeasurementInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:trustedowner.DeployVmRequest.MeasurementInfo)
}
DeployVmRequest_MeasurementInfo::DeployVmRequest_MeasurementInfo(const DeployVmRequest_MeasurementInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  digest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    digest_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_digest().empty()) {
    digest_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_digest(), 
      GetArenaForAllocation());
  }
  ::memcpy(&api_major_, &from.api_major_,
    static_cast<size_t>(reinterpret_cast<char*>(&policy_) -
    reinterpret_cast<char*>(&api_major_)) + sizeof(policy_));
  // @@protoc_insertion_point(copy_constructor:trustedowner.DeployVmRequest.MeasurementInfo)
}

inline void DeployVmRequest_MeasurementInfo::SharedCtor() {
digest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  digest_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&api_major_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&policy_) -
    reinterpret_cast<char*>(&api_major_)) + sizeof(policy_));
}

DeployVmRequest_MeasurementInfo::~DeployVmRequest_MeasurementInfo() {
  // @@protoc_insertion_point(destructor:trustedowner.DeployVmRequest.MeasurementInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeployVmRequest_MeasurementInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  digest_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeployVmRequest_MeasurementInfo::ArenaDtor(void* object) {
  DeployVmRequest_MeasurementInfo* _this = reinterpret_cast< DeployVmRequest_MeasurementInfo* >(object);
  (void)_this;
}
void DeployVmRequest_MeasurementInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeployVmRequest_MeasurementInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeployVmRequest_MeasurementInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:trustedowner.DeployVmRequest.MeasurementInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  digest_.ClearToEmpty();
  ::memset(&api_major_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&policy_) -
      reinterpret_cast<char*>(&api_major_)) + sizeof(policy_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeployVmRequest_MeasurementInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 api_major = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          api_major_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 api_minor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          api_minor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 build_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          build_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 policy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          policy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes digest = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_digest();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeployVmRequest_MeasurementInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trustedowner.DeployVmRequest.MeasurementInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 api_major = 1;
  if (this->_internal_api_major() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_api_major(), target);
  }

  // uint32 api_minor = 2;
  if (this->_internal_api_minor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_api_minor(), target);
  }

  // uint32 build_id = 3;
  if (this->_internal_build_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_build_id(), target);
  }

  // uint32 policy = 4;
  if (this->_internal_policy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_policy(), target);
  }

  // bytes digest = 5;
  if (!this->_internal_digest().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_digest(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trustedowner.DeployVmRequest.MeasurementInfo)
  return target;
}

size_t DeployVmRequest_MeasurementInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trustedowner.DeployVmRequest.MeasurementInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes digest = 5;
  if (!this->_internal_digest().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_digest());
  }

  // uint32 api_major = 1;
  if (this->_internal_api_major() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_api_major());
  }

  // uint32 api_minor = 2;
  if (this->_internal_api_minor() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_api_minor());
  }

  // uint32 build_id = 3;
  if (this->_internal_build_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_build_id());
  }

  // uint32 policy = 4;
  if (this->_internal_policy() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_policy());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeployVmRequest_MeasurementInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeployVmRequest_MeasurementInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeployVmRequest_MeasurementInfo::GetClassData() const { return &_class_data_; }

void DeployVmRequest_MeasurementInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeployVmRequest_MeasurementInfo *>(to)->MergeFrom(
      static_cast<const DeployVmRequest_MeasurementInfo &>(from));
}


void DeployVmRequest_MeasurementInfo::MergeFrom(const DeployVmRequest_MeasurementInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trustedowner.DeployVmRequest.MeasurementInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_digest().empty()) {
    _internal_set_digest(from._internal_digest());
  }
  if (from._internal_api_major() != 0) {
    _internal_set_api_major(from._internal_api_major());
  }
  if (from._internal_api_minor() != 0) {
    _internal_set_api_minor(from._internal_api_minor());
  }
  if (from._internal_build_id() != 0) {
    _internal_set_build_id(from._internal_build_id());
  }
  if (from._internal_policy() != 0) {
    _internal_set_policy(from._internal_policy());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeployVmRequest_MeasurementInfo::CopyFrom(const DeployVmRequest_MeasurementInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trustedowner.DeployVmRequest.MeasurementInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeployVmRequest_MeasurementInfo::IsInitialized() const {
  return true;
}

void DeployVmRequest_MeasurementInfo::InternalSwap(DeployVmRequest_MeasurementInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &digest_, lhs_arena,
      &other->digest_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeployVmRequest_MeasurementInfo, policy_)
      + sizeof(DeployVmRequest_MeasurementInfo::policy_)
      - PROTOBUF_FIELD_OFFSET(DeployVmRequest_MeasurementInfo, api_major_)>(
          reinterpret_cast<char*>(&api_major_),
          reinterpret_cast<char*>(&other->api_major_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeployVmRequest_MeasurementInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2eproto_getter, &descriptor_table_server_2eproto_once,
      file_level_metadata_server_2eproto[1]);
}

// ===================================================================

class DeployVmRequest::_Internal {
 public:
  static const ::trustedowner::DeployVmRequest_AmdCerts& certs(const DeployVmRequest* msg);
  static const ::trustedowner::DeployVmRequest_MeasurementInfo& info(const DeployVmRequest* msg);
};

const ::trustedowner::DeployVmRequest_AmdCerts&
DeployVmRequest::_Internal::certs(const DeployVmRequest* msg) {
  return *msg->certs_;
}
const ::trustedowner::DeployVmRequest_MeasurementInfo&
DeployVmRequest::_Internal::info(const DeployVmRequest* msg) {
  return *msg->info_;
}
DeployVmRequest::DeployVmRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:trustedowner.DeployVmRequest)
}
DeployVmRequest::DeployVmRequest(const DeployVmRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_certs()) {
    certs_ = new ::trustedowner::DeployVmRequest_AmdCerts(*from.certs_);
  } else {
    certs_ = nullptr;
  }
  if (from._internal_has_info()) {
    info_ = new ::trustedowner::DeployVmRequest_MeasurementInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:trustedowner.DeployVmRequest)
}

inline void DeployVmRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&certs_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&info_) -
    reinterpret_cast<char*>(&certs_)) + sizeof(info_));
}

DeployVmRequest::~DeployVmRequest() {
  // @@protoc_insertion_point(destructor:trustedowner.DeployVmRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeployVmRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete certs_;
  if (this != internal_default_instance()) delete info_;
}

void DeployVmRequest::ArenaDtor(void* object) {
  DeployVmRequest* _this = reinterpret_cast< DeployVmRequest* >(object);
  (void)_this;
}
void DeployVmRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeployVmRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeployVmRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:trustedowner.DeployVmRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && certs_ != nullptr) {
    delete certs_;
  }
  certs_ = nullptr;
  if (GetArenaForAllocation() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeployVmRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .trustedowner.DeployVmRequest.AmdCerts certs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_certs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .trustedowner.DeployVmRequest.MeasurementInfo info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeployVmRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trustedowner.DeployVmRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .trustedowner.DeployVmRequest.AmdCerts certs = 1;
  if (this->_internal_has_certs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::certs(this), target, stream);
  }

  // .trustedowner.DeployVmRequest.MeasurementInfo info = 2;
  if (this->_internal_has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trustedowner.DeployVmRequest)
  return target;
}

size_t DeployVmRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trustedowner.DeployVmRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .trustedowner.DeployVmRequest.AmdCerts certs = 1;
  if (this->_internal_has_certs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *certs_);
  }

  // .trustedowner.DeployVmRequest.MeasurementInfo info = 2;
  if (this->_internal_has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeployVmRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeployVmRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeployVmRequest::GetClassData() const { return &_class_data_; }

void DeployVmRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeployVmRequest *>(to)->MergeFrom(
      static_cast<const DeployVmRequest &>(from));
}


void DeployVmRequest::MergeFrom(const DeployVmRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trustedowner.DeployVmRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_certs()) {
    _internal_mutable_certs()->::trustedowner::DeployVmRequest_AmdCerts::MergeFrom(from._internal_certs());
  }
  if (from._internal_has_info()) {
    _internal_mutable_info()->::trustedowner::DeployVmRequest_MeasurementInfo::MergeFrom(from._internal_info());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeployVmRequest::CopyFrom(const DeployVmRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trustedowner.DeployVmRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeployVmRequest::IsInitialized() const {
  return true;
}

void DeployVmRequest::InternalSwap(DeployVmRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeployVmRequest, info_)
      + sizeof(DeployVmRequest::info_)
      - PROTOBUF_FIELD_OFFSET(DeployVmRequest, certs_)>(
          reinterpret_cast<char*>(&certs_),
          reinterpret_cast<char*>(&other->certs_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeployVmRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2eproto_getter, &descriptor_table_server_2eproto_once,
      file_level_metadata_server_2eproto[2]);
}

// ===================================================================

class DeployVmReply::_Internal {
 public:
};

DeployVmReply::DeployVmReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:trustedowner.DeployVmReply)
}
DeployVmReply::DeployVmReply(const DeployVmReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  session_buffer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    session_buffer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_session_buffer().empty()) {
    session_buffer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session_buffer(), 
      GetArenaForAllocation());
  }
  godh_cert_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    godh_cert_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_godh_cert().empty()) {
    godh_cert_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_godh_cert(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:trustedowner.DeployVmReply)
}

inline void DeployVmReply::SharedCtor() {
session_buffer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  session_buffer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
godh_cert_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  godh_cert_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeployVmReply::~DeployVmReply() {
  // @@protoc_insertion_point(destructor:trustedowner.DeployVmReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeployVmReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  session_buffer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  godh_cert_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeployVmReply::ArenaDtor(void* object) {
  DeployVmReply* _this = reinterpret_cast< DeployVmReply* >(object);
  (void)_this;
}
void DeployVmReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeployVmReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeployVmReply::Clear() {
// @@protoc_insertion_point(message_clear_start:trustedowner.DeployVmReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_buffer_.ClearToEmpty();
  godh_cert_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeployVmReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes session_buffer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_session_buffer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes godh_cert = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_godh_cert();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeployVmReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trustedowner.DeployVmReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes session_buffer = 1;
  if (!this->_internal_session_buffer().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_session_buffer(), target);
  }

  // bytes godh_cert = 2;
  if (!this->_internal_godh_cert().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_godh_cert(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trustedowner.DeployVmReply)
  return target;
}

size_t DeployVmReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trustedowner.DeployVmReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes session_buffer = 1;
  if (!this->_internal_session_buffer().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_session_buffer());
  }

  // bytes godh_cert = 2;
  if (!this->_internal_godh_cert().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_godh_cert());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeployVmReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeployVmReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeployVmReply::GetClassData() const { return &_class_data_; }

void DeployVmReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeployVmReply *>(to)->MergeFrom(
      static_cast<const DeployVmReply &>(from));
}


void DeployVmReply::MergeFrom(const DeployVmReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trustedowner.DeployVmReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_session_buffer().empty()) {
    _internal_set_session_buffer(from._internal_session_buffer());
  }
  if (!from._internal_godh_cert().empty()) {
    _internal_set_godh_cert(from._internal_godh_cert());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeployVmReply::CopyFrom(const DeployVmReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trustedowner.DeployVmReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeployVmReply::IsInitialized() const {
  return true;
}

void DeployVmReply::InternalSwap(DeployVmReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &session_buffer_, lhs_arena,
      &other->session_buffer_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &godh_cert_, lhs_arena,
      &other->godh_cert_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeployVmReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2eproto_getter, &descriptor_table_server_2eproto_once,
      file_level_metadata_server_2eproto[3]);
}

// ===================================================================

class ProvisionVmRequest::_Internal {
 public:
};

ProvisionVmRequest::ProvisionVmRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:trustedowner.ProvisionVmRequest)
}
ProvisionVmRequest::ProvisionVmRequest(const ProvisionVmRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  measurement_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    measurement_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_measurement().empty()) {
    measurement_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_measurement(), 
      GetArenaForAllocation());
  }
  mnonce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mnonce_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mnonce().empty()) {
    mnonce_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mnonce(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:trustedowner.ProvisionVmRequest)
}

inline void ProvisionVmRequest::SharedCtor() {
measurement_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  measurement_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
mnonce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mnonce_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProvisionVmRequest::~ProvisionVmRequest() {
  // @@protoc_insertion_point(destructor:trustedowner.ProvisionVmRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProvisionVmRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  measurement_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mnonce_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProvisionVmRequest::ArenaDtor(void* object) {
  ProvisionVmRequest* _this = reinterpret_cast< ProvisionVmRequest* >(object);
  (void)_this;
}
void ProvisionVmRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProvisionVmRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProvisionVmRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:trustedowner.ProvisionVmRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  measurement_.ClearToEmpty();
  mnonce_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProvisionVmRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes measurement = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_measurement();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes mnonce = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_mnonce();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProvisionVmRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trustedowner.ProvisionVmRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes measurement = 1;
  if (!this->_internal_measurement().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_measurement(), target);
  }

  // bytes mnonce = 2;
  if (!this->_internal_mnonce().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_mnonce(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trustedowner.ProvisionVmRequest)
  return target;
}

size_t ProvisionVmRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trustedowner.ProvisionVmRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes measurement = 1;
  if (!this->_internal_measurement().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_measurement());
  }

  // bytes mnonce = 2;
  if (!this->_internal_mnonce().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_mnonce());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProvisionVmRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProvisionVmRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProvisionVmRequest::GetClassData() const { return &_class_data_; }

void ProvisionVmRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProvisionVmRequest *>(to)->MergeFrom(
      static_cast<const ProvisionVmRequest &>(from));
}


void ProvisionVmRequest::MergeFrom(const ProvisionVmRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trustedowner.ProvisionVmRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_measurement().empty()) {
    _internal_set_measurement(from._internal_measurement());
  }
  if (!from._internal_mnonce().empty()) {
    _internal_set_mnonce(from._internal_mnonce());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProvisionVmRequest::CopyFrom(const ProvisionVmRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trustedowner.ProvisionVmRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProvisionVmRequest::IsInitialized() const {
  return true;
}

void ProvisionVmRequest::InternalSwap(ProvisionVmRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &measurement_, lhs_arena,
      &other->measurement_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mnonce_, lhs_arena,
      &other->mnonce_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ProvisionVmRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2eproto_getter, &descriptor_table_server_2eproto_once,
      file_level_metadata_server_2eproto[4]);
}

// ===================================================================

class ProvisionVmReply::_Internal {
 public:
};

ProvisionVmReply::ProvisionVmReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:trustedowner.ProvisionVmReply)
}
ProvisionVmReply::ProvisionVmReply(const ProvisionVmReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  secret_header_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    secret_header_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_secret_header().empty()) {
    secret_header_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_secret_header(), 
      GetArenaForAllocation());
  }
  secret_blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    secret_blob_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_secret_blob().empty()) {
    secret_blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_secret_blob(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:trustedowner.ProvisionVmReply)
}

inline void ProvisionVmReply::SharedCtor() {
secret_header_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  secret_header_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
secret_blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  secret_blob_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProvisionVmReply::~ProvisionVmReply() {
  // @@protoc_insertion_point(destructor:trustedowner.ProvisionVmReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProvisionVmReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  secret_header_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_blob_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProvisionVmReply::ArenaDtor(void* object) {
  ProvisionVmReply* _this = reinterpret_cast< ProvisionVmReply* >(object);
  (void)_this;
}
void ProvisionVmReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProvisionVmReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProvisionVmReply::Clear() {
// @@protoc_insertion_point(message_clear_start:trustedowner.ProvisionVmReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  secret_header_.ClearToEmpty();
  secret_blob_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProvisionVmReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes secret_header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_secret_header();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes secret_blob = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_secret_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProvisionVmReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trustedowner.ProvisionVmReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes secret_header = 1;
  if (!this->_internal_secret_header().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_secret_header(), target);
  }

  // bytes secret_blob = 2;
  if (!this->_internal_secret_blob().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_secret_blob(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trustedowner.ProvisionVmReply)
  return target;
}

size_t ProvisionVmReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trustedowner.ProvisionVmReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes secret_header = 1;
  if (!this->_internal_secret_header().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_secret_header());
  }

  // bytes secret_blob = 2;
  if (!this->_internal_secret_blob().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_secret_blob());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProvisionVmReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProvisionVmReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProvisionVmReply::GetClassData() const { return &_class_data_; }

void ProvisionVmReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProvisionVmReply *>(to)->MergeFrom(
      static_cast<const ProvisionVmReply &>(from));
}


void ProvisionVmReply::MergeFrom(const ProvisionVmReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trustedowner.ProvisionVmReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_secret_header().empty()) {
    _internal_set_secret_header(from._internal_secret_header());
  }
  if (!from._internal_secret_blob().empty()) {
    _internal_set_secret_blob(from._internal_secret_blob());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProvisionVmReply::CopyFrom(const ProvisionVmReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trustedowner.ProvisionVmReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProvisionVmReply::IsInitialized() const {
  return true;
}

void ProvisionVmReply::InternalSwap(ProvisionVmReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &secret_header_, lhs_arena,
      &other->secret_header_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &secret_blob_, lhs_arena,
      &other->secret_blob_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ProvisionVmReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2eproto_getter, &descriptor_table_server_2eproto_once,
      file_level_metadata_server_2eproto[5]);
}

// ===================================================================

class GenerateReportForVmRequest::_Internal {
 public:
};

GenerateReportForVmRequest::GenerateReportForVmRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:trustedowner.GenerateReportForVmRequest)
}
GenerateReportForVmRequest::GenerateReportForVmRequest(const GenerateReportForVmRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vm_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    vm_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vm_data().empty()) {
    vm_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vm_data(), 
      GetArenaForAllocation());
  }
  vm_data_hmac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    vm_data_hmac_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vm_data_hmac().empty()) {
    vm_data_hmac_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vm_data_hmac(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:trustedowner.GenerateReportForVmRequest)
}

inline void GenerateReportForVmRequest::SharedCtor() {
vm_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  vm_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
vm_data_hmac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  vm_data_hmac_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GenerateReportForVmRequest::~GenerateReportForVmRequest() {
  // @@protoc_insertion_point(destructor:trustedowner.GenerateReportForVmRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GenerateReportForVmRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  vm_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vm_data_hmac_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GenerateReportForVmRequest::ArenaDtor(void* object) {
  GenerateReportForVmRequest* _this = reinterpret_cast< GenerateReportForVmRequest* >(object);
  (void)_this;
}
void GenerateReportForVmRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenerateReportForVmRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GenerateReportForVmRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:trustedowner.GenerateReportForVmRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vm_data_.ClearToEmpty();
  vm_data_hmac_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenerateReportForVmRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes vm_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_vm_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes vm_data_hmac = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_vm_data_hmac();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GenerateReportForVmRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trustedowner.GenerateReportForVmRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes vm_data = 1;
  if (!this->_internal_vm_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_vm_data(), target);
  }

  // bytes vm_data_hmac = 2;
  if (!this->_internal_vm_data_hmac().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_vm_data_hmac(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trustedowner.GenerateReportForVmRequest)
  return target;
}

size_t GenerateReportForVmRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trustedowner.GenerateReportForVmRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes vm_data = 1;
  if (!this->_internal_vm_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_vm_data());
  }

  // bytes vm_data_hmac = 2;
  if (!this->_internal_vm_data_hmac().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_vm_data_hmac());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenerateReportForVmRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GenerateReportForVmRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenerateReportForVmRequest::GetClassData() const { return &_class_data_; }

void GenerateReportForVmRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GenerateReportForVmRequest *>(to)->MergeFrom(
      static_cast<const GenerateReportForVmRequest &>(from));
}


void GenerateReportForVmRequest::MergeFrom(const GenerateReportForVmRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trustedowner.GenerateReportForVmRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_vm_data().empty()) {
    _internal_set_vm_data(from._internal_vm_data());
  }
  if (!from._internal_vm_data_hmac().empty()) {
    _internal_set_vm_data_hmac(from._internal_vm_data_hmac());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenerateReportForVmRequest::CopyFrom(const GenerateReportForVmRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trustedowner.GenerateReportForVmRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenerateReportForVmRequest::IsInitialized() const {
  return true;
}

void GenerateReportForVmRequest::InternalSwap(GenerateReportForVmRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &vm_data_, lhs_arena,
      &other->vm_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &vm_data_hmac_, lhs_arena,
      &other->vm_data_hmac_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GenerateReportForVmRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2eproto_getter, &descriptor_table_server_2eproto_once,
      file_level_metadata_server_2eproto[6]);
}

// ===================================================================

class GenerateReportForVmReply::_Internal {
 public:
};

GenerateReportForVmReply::GenerateReportForVmReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:trustedowner.GenerateReportForVmReply)
}
GenerateReportForVmReply::GenerateReportForVmReply(const GenerateReportForVmReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  quote_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    quote_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_quote().empty()) {
    quote_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_quote(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:trustedowner.GenerateReportForVmReply)
}

inline void GenerateReportForVmReply::SharedCtor() {
quote_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  quote_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GenerateReportForVmReply::~GenerateReportForVmReply() {
  // @@protoc_insertion_point(destructor:trustedowner.GenerateReportForVmReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GenerateReportForVmReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  quote_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GenerateReportForVmReply::ArenaDtor(void* object) {
  GenerateReportForVmReply* _this = reinterpret_cast< GenerateReportForVmReply* >(object);
  (void)_this;
}
void GenerateReportForVmReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenerateReportForVmReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GenerateReportForVmReply::Clear() {
// @@protoc_insertion_point(message_clear_start:trustedowner.GenerateReportForVmReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  quote_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenerateReportForVmReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes quote = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_quote();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GenerateReportForVmReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trustedowner.GenerateReportForVmReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes quote = 1;
  if (!this->_internal_quote().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_quote(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trustedowner.GenerateReportForVmReply)
  return target;
}

size_t GenerateReportForVmReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trustedowner.GenerateReportForVmReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes quote = 1;
  if (!this->_internal_quote().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_quote());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenerateReportForVmReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GenerateReportForVmReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenerateReportForVmReply::GetClassData() const { return &_class_data_; }

void GenerateReportForVmReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GenerateReportForVmReply *>(to)->MergeFrom(
      static_cast<const GenerateReportForVmReply &>(from));
}


void GenerateReportForVmReply::MergeFrom(const GenerateReportForVmReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trustedowner.GenerateReportForVmReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_quote().empty()) {
    _internal_set_quote(from._internal_quote());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenerateReportForVmReply::CopyFrom(const GenerateReportForVmReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trustedowner.GenerateReportForVmReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenerateReportForVmReply::IsInitialized() const {
  return true;
}

void GenerateReportForVmReply::InternalSwap(GenerateReportForVmReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &quote_, lhs_arena,
      &other->quote_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GenerateReportForVmReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2eproto_getter, &descriptor_table_server_2eproto_once,
      file_level_metadata_server_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace trustedowner
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::trustedowner::DeployVmRequest_AmdCerts* Arena::CreateMaybeMessage< ::trustedowner::DeployVmRequest_AmdCerts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trustedowner::DeployVmRequest_AmdCerts >(arena);
}
template<> PROTOBUF_NOINLINE ::trustedowner::DeployVmRequest_MeasurementInfo* Arena::CreateMaybeMessage< ::trustedowner::DeployVmRequest_MeasurementInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trustedowner::DeployVmRequest_MeasurementInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::trustedowner::DeployVmRequest* Arena::CreateMaybeMessage< ::trustedowner::DeployVmRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trustedowner::DeployVmRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::trustedowner::DeployVmReply* Arena::CreateMaybeMessage< ::trustedowner::DeployVmReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trustedowner::DeployVmReply >(arena);
}
template<> PROTOBUF_NOINLINE ::trustedowner::ProvisionVmRequest* Arena::CreateMaybeMessage< ::trustedowner::ProvisionVmRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trustedowner::ProvisionVmRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::trustedowner::ProvisionVmReply* Arena::CreateMaybeMessage< ::trustedowner::ProvisionVmReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trustedowner::ProvisionVmReply >(arena);
}
template<> PROTOBUF_NOINLINE ::trustedowner::GenerateReportForVmRequest* Arena::CreateMaybeMessage< ::trustedowner::GenerateReportForVmRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trustedowner::GenerateReportForVmRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::trustedowner::GenerateReportForVmReply* Arena::CreateMaybeMessage< ::trustedowner::GenerateReportForVmReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trustedowner::GenerateReportForVmReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
