# -*- coding: utf-8 -*-
#
# Burrito
# Copyright (C) 2023 The Blockhouse Technology Limited (TBTL)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#

# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: server.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x0cserver.proto\x12\x0ctrustedowner\"\xca\x02\n\x0f\x44\x65ployVmRequest\x12\x35\n\x05\x63\x65rts\x18\x01 \x01(\x0b\x32&.trustedowner.DeployVmRequest.AmdCerts\x12;\n\x04info\x18\x02 \x01(\x0b\x32-.trustedowner.DeployVmRequest.MeasurementInfo\x1aX\n\x08\x41mdCerts\x12\x0b\n\x03\x61rk\x18\x01 \x01(\x0c\x12\x0b\n\x03\x61sk\x18\x02 \x01(\x0c\x12\x0b\n\x03\x63\x65k\x18\x03 \x01(\x0c\x12\x0b\n\x03oca\x18\x04 \x01(\x0c\x12\x0b\n\x03pek\x18\x05 \x01(\x0c\x12\x0b\n\x03pdh\x18\x06 \x01(\x0c\x1ai\n\x0fMeasurementInfo\x12\x11\n\tapi_major\x18\x01 \x01(\r\x12\x11\n\tapi_minor\x18\x02 \x01(\r\x12\x10\n\x08\x62uild_id\x18\x03 \x01(\r\x12\x0e\n\x06policy\x18\x04 \x01(\r\x12\x0e\n\x06\x64igest\x18\x05 \x01(\x0c\":\n\rDeployVmReply\x12\x16\n\x0esession_buffer\x18\x01 \x01(\x0c\x12\x11\n\tgodh_cert\x18\x02 \x01(\x0c\"9\n\x12ProvisionVmRequest\x12\x13\n\x0bmeasurement\x18\x01 \x01(\x0c\x12\x0e\n\x06mnonce\x18\x02 \x01(\x0c\">\n\x10ProvisionVmReply\x12\x15\n\rsecret_header\x18\x01 \x01(\x0c\x12\x13\n\x0bsecret_blob\x18\x02 \x01(\x0c\"C\n\x1aGenerateReportForVmRequest\x12\x0f\n\x07vm_data\x18\x01 \x01(\x0c\x12\x14\n\x0cvm_data_hmac\x18\x02 \x01(\x0c\")\n\x18GenerateReportForVmReply\x12\r\n\x05quote\x18\x01 \x01(\x0c\x32\x96\x02\n\x0cTrustedOwner\x12H\n\x08\x44\x65ployVm\x12\x1d.trustedowner.DeployVmRequest\x1a\x1b.trustedowner.DeployVmReply\"\x00\x12Q\n\x0bProvisionVm\x12 .trustedowner.ProvisionVmRequest\x1a\x1e.trustedowner.ProvisionVmReply\"\x00\x12i\n\x13GenerateReportForVm\x12(.trustedowner.GenerateReportForVmRequest\x1a&.trustedowner.GenerateReportForVmReply\"\x00\x42\x06\xa2\x02\x03\x41TRb\x06proto3')



_DEPLOYVMREQUEST = DESCRIPTOR.message_types_by_name['DeployVmRequest']
_DEPLOYVMREQUEST_AMDCERTS = _DEPLOYVMREQUEST.nested_types_by_name['AmdCerts']
_DEPLOYVMREQUEST_MEASUREMENTINFO = _DEPLOYVMREQUEST.nested_types_by_name['MeasurementInfo']
_DEPLOYVMREPLY = DESCRIPTOR.message_types_by_name['DeployVmReply']
_PROVISIONVMREQUEST = DESCRIPTOR.message_types_by_name['ProvisionVmRequest']
_PROVISIONVMREPLY = DESCRIPTOR.message_types_by_name['ProvisionVmReply']
_GENERATEREPORTFORVMREQUEST = DESCRIPTOR.message_types_by_name['GenerateReportForVmRequest']
_GENERATEREPORTFORVMREPLY = DESCRIPTOR.message_types_by_name['GenerateReportForVmReply']
DeployVmRequest = _reflection.GeneratedProtocolMessageType('DeployVmRequest', (_message.Message,), {

  'AmdCerts' : _reflection.GeneratedProtocolMessageType('AmdCerts', (_message.Message,), {
    'DESCRIPTOR' : _DEPLOYVMREQUEST_AMDCERTS,
    '__module__' : 'server_pb2'
    # @@protoc_insertion_point(class_scope:trustedowner.DeployVmRequest.AmdCerts)
    })
  ,

  'MeasurementInfo' : _reflection.GeneratedProtocolMessageType('MeasurementInfo', (_message.Message,), {
    'DESCRIPTOR' : _DEPLOYVMREQUEST_MEASUREMENTINFO,
    '__module__' : 'server_pb2'
    # @@protoc_insertion_point(class_scope:trustedowner.DeployVmRequest.MeasurementInfo)
    })
  ,
  'DESCRIPTOR' : _DEPLOYVMREQUEST,
  '__module__' : 'server_pb2'
  # @@protoc_insertion_point(class_scope:trustedowner.DeployVmRequest)
  })
_sym_db.RegisterMessage(DeployVmRequest)
_sym_db.RegisterMessage(DeployVmRequest.AmdCerts)
_sym_db.RegisterMessage(DeployVmRequest.MeasurementInfo)

DeployVmReply = _reflection.GeneratedProtocolMessageType('DeployVmReply', (_message.Message,), {
  'DESCRIPTOR' : _DEPLOYVMREPLY,
  '__module__' : 'server_pb2'
  # @@protoc_insertion_point(class_scope:trustedowner.DeployVmReply)
  })
_sym_db.RegisterMessage(DeployVmReply)

ProvisionVmRequest = _reflection.GeneratedProtocolMessageType('ProvisionVmRequest', (_message.Message,), {
  'DESCRIPTOR' : _PROVISIONVMREQUEST,
  '__module__' : 'server_pb2'
  # @@protoc_insertion_point(class_scope:trustedowner.ProvisionVmRequest)
  })
_sym_db.RegisterMessage(ProvisionVmRequest)

ProvisionVmReply = _reflection.GeneratedProtocolMessageType('ProvisionVmReply', (_message.Message,), {
  'DESCRIPTOR' : _PROVISIONVMREPLY,
  '__module__' : 'server_pb2'
  # @@protoc_insertion_point(class_scope:trustedowner.ProvisionVmReply)
  })
_sym_db.RegisterMessage(ProvisionVmReply)

GenerateReportForVmRequest = _reflection.GeneratedProtocolMessageType('GenerateReportForVmRequest', (_message.Message,), {
  'DESCRIPTOR' : _GENERATEREPORTFORVMREQUEST,
  '__module__' : 'server_pb2'
  # @@protoc_insertion_point(class_scope:trustedowner.GenerateReportForVmRequest)
  })
_sym_db.RegisterMessage(GenerateReportForVmRequest)

GenerateReportForVmReply = _reflection.GeneratedProtocolMessageType('GenerateReportForVmReply', (_message.Message,), {
  'DESCRIPTOR' : _GENERATEREPORTFORVMREPLY,
  '__module__' : 'server_pb2'
  # @@protoc_insertion_point(class_scope:trustedowner.GenerateReportForVmReply)
  })
_sym_db.RegisterMessage(GenerateReportForVmReply)

_TRUSTEDOWNER = DESCRIPTOR.services_by_name['TrustedOwner']
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'\242\002\003ATR'
  _DEPLOYVMREQUEST._serialized_start=31
  _DEPLOYVMREQUEST._serialized_end=361
  _DEPLOYVMREQUEST_AMDCERTS._serialized_start=166
  _DEPLOYVMREQUEST_AMDCERTS._serialized_end=254
  _DEPLOYVMREQUEST_MEASUREMENTINFO._serialized_start=256
  _DEPLOYVMREQUEST_MEASUREMENTINFO._serialized_end=361
  _DEPLOYVMREPLY._serialized_start=363
  _DEPLOYVMREPLY._serialized_end=421
  _PROVISIONVMREQUEST._serialized_start=423
  _PROVISIONVMREQUEST._serialized_end=480
  _PROVISIONVMREPLY._serialized_start=482
  _PROVISIONVMREPLY._serialized_end=544
  _GENERATEREPORTFORVMREQUEST._serialized_start=546
  _GENERATEREPORTFORVMREQUEST._serialized_end=613
  _GENERATEREPORTFORVMREPLY._serialized_start=615
  _GENERATEREPORTFORVMREPLY._serialized_end=656
  _TRUSTEDOWNER._serialized_start=659
  _TRUSTEDOWNER._serialized_end=937
# @@protoc_insertion_point(module_scope)
